// Copyright (c) Microsoft. All rights reserved.

using System.Collections.Generic;
using System.Linq;
using Newtonsoft.Json;

namespace Microsoft.Azure.IoTSolutions.AsaManager.Services.Models
{
    public class Rule
    {
        public class Condition
        {
            [JsonProperty("Field")]
            public string Field { get; set; }

            [JsonProperty("Operator")]
            public string Operator { get; set; }

            [JsonProperty("Value")]
            public string Value { get; set; }

            public override bool Equals(object obj)
            {
                if (!(obj is Condition x)) return false;

                return string.Equals(this.Field, x.Field)
                       && string.Equals(this.Operator, x.Operator)
                       && string.Equals(this.Value, x.Value);
            }

            /// <summary>Method required when implementing a custom equality logic [CS0659]</summary>
            /// <remarks>Code auto-generated by IDE</remarks>
            public override int GetHashCode()
            {
                unchecked
                {
                    var hashCode = (this.Field != null ? this.Field.GetHashCode() : 0);
                    hashCode = (hashCode * 397) ^ (this.Operator != null ? this.Operator.GetHashCode() : 0);
                    hashCode = (hashCode * 397) ^ (this.Value != null ? this.Value.GetHashCode() : 0);
                    return hashCode;
                }
            }
        }

        public Rule()
        {
            this.Conditions = new List<Condition>();
        }

        [JsonProperty("Id")]
        public string Id { get; set; }

        [JsonProperty("Name")]
        public string Name { get; set; }

        [JsonProperty("Enabled")]
        public bool Enabled { get; set; }

        [JsonProperty("Description")]
        public string Description { get; set; }

        [JsonProperty("GroupId")]
        public string GroupId { get; set; }

        [JsonProperty("Severity")]
        public string Severity { get; set; }

        [JsonProperty("Conditions")]
        public IList<Condition> Conditions { get; set; }

        public override bool Equals(object obj)
        {
            if (!(obj is Rule x)) return false;

            var count = this.Conditions.Count();
            var conditionsMatch = x.Conditions.Count() == count;

            while (conditionsMatch && --count >= 0)
            {
                conditionsMatch = conditionsMatch
                                  && this.Conditions[count].Equals(x.Conditions[count]);
            }

            // Compare everything except the description
            return conditionsMatch
                   && string.Equals(this.Id, x.Id)
                   && string.Equals(this.Name, x.Name)
                   && this.Enabled == x.Enabled
                   && string.Equals(this.GroupId, x.GroupId)
                   && string.Equals(this.Severity, x.Severity);
        }

        /// <summary>Method required when implementing a custom equality logic [CS0659]</summary>
        /// <remarks>Code auto-generated by IDE</remarks>
        public override int GetHashCode()
        {
            unchecked
            {
                var hashCode = (this.Id != null ? this.Id.GetHashCode() : 0);
                hashCode = (hashCode * 397) ^ (this.Name != null ? this.Name.GetHashCode() : 0);
                hashCode = (hashCode * 397) ^ this.Enabled.GetHashCode();
                hashCode = (hashCode * 397) ^ (this.GroupId != null ? this.GroupId.GetHashCode() : 0);
                hashCode = (hashCode * 397) ^ (this.Severity != null ? this.Severity.GetHashCode() : 0);
                hashCode = (hashCode * 397) ^ (this.Conditions != null ? this.Conditions.GetHashCode() : 0);
                return hashCode;
            }
        }
    }
}
